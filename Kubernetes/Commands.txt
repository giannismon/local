minikube stop
minikube delete
minikube start --force 
----

kubectl version
kubectl get all

kubectl get nodes
kubectl get pods
kubectl get services

DEPLOYMENTS
Dimiourgia Deployment pou stin ousia einai pod
kubectl create deployment nginx-deployment --image=nginx:latest
kubectl create deployment nginx-deployment --image=nginx:latest --replicas=3
kubectl get deployment
kubectl get pods
kubectl get replicaset
An to kanw edit aftomata ginete h alagh apo monh ths 
 kubectl edit deployment nginx-deployment
 kubectl logs nginx-deployment-78959b95d4-p49kb

kubectl create deployment mongo-deployment --image=mongo:latest
kubectl get pods
kubectl logs mongo-deployment-65669bbd4c-x9c9s

 kubectl describe pods
 kubectl describe pod mongo-deployment-65669bbd4c-x9c9s
kubectl logs mongo-deployment-65669bbd4c-x9c9s


kubectl exec -it <pod-name> -- /bin/bash
kubectl exec -it mongo-deployment-65669bbd4c-x9c9s -- /bin/bash

kubectl get deployment
kubectl delete deployment mongo-deployment
kubectl get pods
kubectl get replicaset
kubectl delete deployment nginx-deployment
kubectl get replicaset




pod
kubectl run nginx --image=nginx
kubectl run nginx --image=nginx --dry-run=client -o yaml

deployment
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml

Service Tipes
Nodeport
ClusterIp
Load Balancer

Ta services sindeonte me ta pods mesw twn lables otan dimiourgounte kai tous selectors apo merias service  pou  dilonete se pia na efarmostei afto to service .


Name spaces
ena pod mporei na kalesei ena service sto idio namespace me to onoma tou mono alla an einai se diaforetiko namespace px dev tote prepi na xrisimopihthei to full path
kubectl create namespace dev
kubectl apply -f pod.yaml --namespace=dev

kubectl get pods --all-namespaces | grep blue






kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
Εκθέτει έναν υπάρχοντα πόρο (π.χ. pod) και δημιουργεί ένα Service βασισμένο στις ετικέτες αυτού του πόρου.


kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml
Δημιουργεί ένα νέο Service από την αρχή, χωρίς να βασίζεται σε υπάρχοντα πόρο. Χρειάζεται να προσθέσετε τους selectors αν θέλετε να συνδεθεί με υπάρχοντα pods.


Dimiourgia pod kai dimiourgia service me to idio onoma 
kubectl run httpd --image=httpd:alpine --port=80 --expose



DIMIOURGIA DEPLOYMENT ME ARXEIO
vim nginx.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.16
        ports:
        - containerPort: 8080






kubectl apply -f <file.yaml>
kubectl apply -f nginx-deployment.yaml
kubectl get deployment
 vim nginx-deployment.yml
 kanw tis alages pou thelw px apo replica 11 to kanw 2 kai meta
kubectl apply -f nginx-deployment.yaml
kubectl get deployment
kubectl get pod


kubectl delete -f <file.yaml>
kubectl logs <pod-name>
kubectl describe <resource-type> <resource-name>

kubectl create secret generic <secret-name> --from-literal=<key>=<value>
kubectl get pods -w
kubectl get secret